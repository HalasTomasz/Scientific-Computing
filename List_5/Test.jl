#Autor Tomasz Ha≈Ças

include("./blocksys.jl")
using Test
using SparseArrays

@testset "Matrix16" begin
    
    IOStreamA = open("Input/16/A.txt")
    IOStreamB = open("Input/16/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(16)
    gauss(A,b,n,l)
    @test isapprox(gauss_solver(A,b,n,l), result)

    IOStreamA = open("Input/16/A.txt")
    IOStreamB = open("Input/16/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(16)
    pivots = gauss_with_pivot(A,b,n,l)
    @test isapprox(gauss_solver_with_pivot(A,b,n,l,pivots), result)
    
    IOStreamA = open("Input/16/A.txt")
    IOStreamB = open("Input/16/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(16)
    L = SparseArrays.spzeros(n, n)
    gauss_lu(A,L,n,l)
    @test isapprox(gauss_solver_lu(A,L,b,n,l), result)
    
    IOStreamA = open("Input/16/A.txt")
    IOStreamB = open("Input/16/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(16)
    L = SparseArrays.spzeros(n, n)
    pivots = gauss_lu_with_pivot(A,L,n,l)
    @test isapprox(gauss_solver_lu_with_pivot(A,L,b,n,l,pivots), result)
    
end



@testset "Matrix10000" begin
    
    IOStreamA = open("Input/10000/A.txt")
    IOStreamB = open("Input/10000/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(10000)
    gauss(A,b,n,l)
    @test isapprox(gauss_solver(A,b,n,l), result)

    IOStreamA = open("Input/10000/A.txt")
    IOStreamB = open("Input/10000/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(10000)
    pivots = gauss_with_pivot(A,b,n,l)
    @test isapprox(gauss_solver_with_pivot(A,b,n,l,pivots), result)
    
    IOStreamA = open("Input/10000/A.txt")
    IOStreamB = open("Input/10000/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(10000)
    L = SparseArrays.spzeros(n, n)
    gauss_lu(A,L,n,l)
    @test isapprox(gauss_solver_lu(A,L,b,n,l), result)
    
    IOStreamA = open("Input/10000/A.txt")
    IOStreamB = open("Input/10000/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(10000)
    L = SparseArrays.spzeros(n, n)
    pivots = gauss_lu_with_pivot(A,L,n,l)
    @test isapprox(gauss_solver_lu_with_pivot(A,L,b,n,l,pivots), result)
    
end

@testset "Matrix50000" begin
    
    IOStreamA = open("Input/50000/A.txt")
    IOStreamB = open("Input/50000/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(50000)
    gauss(A,b,n,l)
    @test isapprox(gauss_solver(A,b,n,l), result)

    IOStreamA = open("Input/50000/A.txt")
    IOStreamB = open("Input/50000/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(50000)
    pivots = gauss_with_pivot(A,b,n,l)
    @test isapprox(gauss_solver_with_pivot(A,b,n,l,pivots), result)
    
    IOStreamA = open("Input/50000/A.txt")
    IOStreamB = open("Input/50000/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(50000)
    L = SparseArrays.spzeros(n, n)
    gauss_lu(A,L,n,l)
    @test isapprox(gauss_solver_lu(A,L,b,n,l), result)
    
    IOStreamA = open("Input/50000/A.txt")
    IOStreamB = open("Input/50000/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(50000)
    L = SparseArrays.spzeros(n, n)
    pivots = gauss_lu_with_pivot(A,L,n,l)
    @test isapprox(gauss_solver_lu_with_pivot(A,L,b,n,l,pivots), result)
    
end

@testset "Matrix100000" begin
    
    IOStreamA = open("Input/100000/A.txt")
    IOStreamB = open("Input/100000/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(100000)
    gauss(A,b,n,l)
    @test isapprox(gauss_solver(A,b,n,l), result)

    IOStreamA = open("Input/100000/A.txt")
    IOStreamB = open("Input/100000/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(100000)
    pivots = gauss_with_pivot(A,b,n,l)
    @test isapprox(gauss_solver_with_pivot(A,b,n,l,pivots), result)
    
    IOStreamA = open("Input/100000/A.txt")
    IOStreamB = open("Input/100000/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(100000)
    L = SparseArrays.spzeros(n, n)
    gauss_lu(A,L,n,l)
    @test isapprox(gauss_solver_lu(A,L,b,n,l), result)
    
    IOStreamA = open("Input/100000/A.txt")
    IOStreamB = open("Input/100000/b.txt")
    line = readline(IOStreamA)
    inputs = split(line)
    n = parse(Int, inputs[1])
    l = parse(Int, inputs[2])
    A = matrixA(IOStreamA,n)
    b = vecB(IOStreamB)
    result = ones(100000)
    L = SparseArrays.spzeros(n, n)
    pivots = gauss_lu_with_pivot(A,L,n,l)
    @test isapprox(gauss_solver_lu_with_pivot(A,L,b,n,l,pivots), result)
    
end


